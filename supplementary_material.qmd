---
title: "A latent trajectory analysis in glycemic control and diabetic retinopathy screening coverage 2011-2023: A municipality-level study"
subtitle: Supplementary Material
editor: visual
tbl-cap-location: top
#number-sections: true
execute:
  enabled: true
  echo: false
  warning: false
  message: false
  cache: false
format:
  html:
    toc: true
    toc_float: true
    toc_depth: 2
    number_sections: true
    code_folding: hide
    theme: readable
  pdf:
    number-sections: true
    colorlinks: true
    keeptex: true
    include-in-header: 
      text: |
        \usepackage{booktabs}
        \usepackage{siunitx}
        \newcolumntype{d}{S[
            input-open-uncertainty=,
            input-close-uncertainty=,
            parse-numbers = false,
            table-align-text-pre=false,
            table-align-text-post=false
         ]}
  docx: default
prefer-html: true
date: 'last-modified'
---

```{r}
#| echo: false
#| warning: false

library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(purrr)
library(patchwork)
library(tidyverse) #dplyr, tibble, ggplot2, readr, tidyr, stringr, forcats, lubridate, purr
library(knitr)
library(kableExtra)
library(ggtext)
library(Cairo)
library(extrafont)
library(hrbrthemes)
library(directlabels)
library(ggrepel)
library(readxl)
library(extrafont)
library(scales)
library(ggsci)
library(lcmm)
library(MixAll)
require(kml)
require(traj)
require(lmerTest)
require(plyr)
require(psych)
require(fpc)
require(mclust)
require(rcompanion)
library(gridExtra)
library(tidyLPA)
library(MASS)
library(broom)
library(skimr)
library(gtExtras)
library(pander)
library(BayesFactor)
library(modelsummary)
library(gt)
library(gtsummary)
library(survival)
library(xtable)
library(skimr)
library(htmltools)
library(tibble)
library(LCTMtools)


options(scipen=10000000)
```

**Rolando Silva-Jorquera^1^, Kasim Allel^2^, Hassan Haghparast-Bidgoli^1^, Paul Nderitu^3^, Claudio Zett^4^, Abraham Olvera-Barrios^5,6^, Alasdair Warwick^5,6,7^**

^1^Institute for Global Health, University College London, UK.

^2^Nuffield Department of Population Health, University of Oxford, UK

^3^Faculty of Life Sciences and Medicine, King’s College London, UK

^4^Pontificia Universidad Católica de Valparaíso, Chile

^5^NIHR Biomedical Research Centre at Moorfields Eye Hospital NHS Foundation Trust

^6^Institute of Ophthalmology, University College London, UK

^7^Institute of Cardiovascular Science, University College London, UK

------------------------------------------------------------------------

```{r}
#| message: false
#| warning: false
#| tbl-align: left


structure_table <- data.frame(
  Model = LETTERS[1:10],
  Description = c(
    "Linear without random effects with equal variances",
    "Linear without random effects with varying variances",
    "Quadratic without random effects",
    "Cubic without random effects",
    "Linear with random intercept",
    "Linear with random intercept and slope",
    "Quadratic with random intercept and slope",
    "Quadratic with random intercept and slope and proportional variance",
    "Cubic with random intercept and slope",
    "Cubic with random intercept and slope and proportional variance"
  ),
  Interpretation = c(
    "Captures linear trends assuming constant variance across latent classes and no individual-level variability.",
    "Captures linear trends allowing class-specific variances, without accounting for individual-level random effects.",
    "Captures curvilinear (quadratic) trajectories with fixed effects only and shared variance structure.",
    "Captures complex nonlinear (cubic) fixed trends without random effects or variance heterogeneity.",
    "Allows individuals to vary in their baseline levels (intercepts) while modeling linear overall trends.",
    "Accounts for both baseline and slope variability across individuals in modeling linear trends.",
    "Models quadratic trajectories with random effects on both intercept and slope, allowing individual variation.",
    "Same as previous, but allows proportional variance differences across latent classes for more flexibility.",
    "Captures complex cubic trends while accounting for individual variation in intercepts and slopes.",
    "Extends the cubic random effects model by allowing class-specific proportional variance structures."
  ),
  stringsAsFactors = FALSE
)

# View table
structure_table %>% 
  gt::gt() %>%
  tab_header(
    title = md("**Supplementary Table S1. Description of the 10 candidate model structures tested in the LCMM analysis**")) %>% 
  tab_options(
    table.font.size = 10,
    data_row.padding = px(1),
    table.border.top.color = "black",
    heading.border.bottom.color = "black",
    row_group.border.top.color = "black",
    row_group.border.bottom.color = "white",
    table.border.bottom.color = "white",
    column_labels.border.top.color = "black",
    column_labels.border.bottom.color = "black",
    table_body.border.bottom.color = "black",
    table_body.hlines.color = "white") %>% 
  tab_source_note(source_note = md(" **Note:** Each model structure was applied across multiple class solutions (1–7 classes) and evaluated using BIC, classification adequacy, and visual interpretability to identify optimal specifications for each outcome and period."))


```

```{r}
#| message: false
#| warning: false
#| tbl-align: left


table_s2 <- tibble::tibble(
  Tool = c(
    "Model Structure",
    "BIC, AIC, LRT",
    "APPA",
    "Odds of Correct Classification (OCC)",
    "Mismatch",
    "Entropy",
    "Relative Entropy",
    "Degrees of Separation",
    "Envelope of Residuals"
  ),
  `Criteria for a good model` = c(
    "—",
    "Lowest BIC/AIC",
    "> 0.70 for each class",
    "> 5.0 for each class",
    "Close to 0",
    "Close to 0",
    "Close to 1 (> 6.0 recommended)",
    "Higher = more separation",
    "Parallel and narrow boundaries"
  ),
  Description = c(
    "COVERAGE_itk = β₀ᵏ + β₁ᵏ·YEAR_it + β₂ᵏ·YEAR_it² + b₀ᵏ + b₁ᵏ·YEAR_it + b₂ᵏ·YEAR_it² + εₜ (Eq. 1)\n→ β: fixed effects; b: random effects; εₜ: error term.\nPr(i in class k) = exp(π_k) / Σ exp(π_l) (Eq. 2)\n→ π_k: class-specific membership parameter.",
    "Likelihood-based tools to evaluate model parsimony and fit.",
    "Average Posterior Probability Assignment;\nmeasures certainty of class membership.",
    "OCC = OCC = (πg * (1 - pg)) / (pg * (1 - πg)) — compares expected vs. actual class membership.",
    "Mismatch = Mismatch = πg - ng/N — difference between predicted and assigned class size.",
    "Entropy = Entropy = – Σi Σg (pig * log(pig)) — global uncertainty across posterior probabilities.",
    "Relative Entropy = 1 – (E / (G * log G)) — standardized measure of classification uncertainty.",
    "Weighted Mahalanobis distance between predicted class means;\nhigher = more distinct classes.",
    "Residual bounds: mean ± SD of residuals;\nnon-parallel/wide bounds suggest heteroscedasticity or poor class separation."
  )
)

gt(table_s2) %>%
  tab_header(
    title = md("**Supplementary Table S2. Model structure and commonly assessment tools used in the LCMM analysis**")
  ) %>%
  tab_source_note(
    md("*DoS and residual envelopes were implemented following Peugh & Fan and Elsensohn et al.*")
  ) %>%
  tab_options(
    table.font.size = 11,
    data_row.padding = px(2),
    table.border.top.color = "black",
    heading.border.bottom.color = "black",
    column_labels.border.bottom.color = "black"
  ) 



```

**Supplementary Figure S1.** ***Standardised residual plots by latent class under Model A (fixed-effects, homoscedastic structure with four classes).***\
Each panel shows the distribution of standardised residuals over time (Year) for a given latent class under a linear fixed-effects, homoscedastic model (Model A) with four latent classes (K = 4). The first row corresponds to DGCC (2011–2023), the second to DGCC (2011–2019), the third to DRSC (2011–2023), and the fourth to DRSC (2011–2019). Although residuals appear tightly clustered around zero due to model constraints, smoothed lines reveal mild curvature in several classes—particularly in DRSC 2011–2023—suggesting potential misspecification of fixed effects and motivating the exploration of more complex specifications, including the addition of flexible random-effects structures in subsequent models.

```{r}
#| label: Fig-S1
#| fig-align: left
#| fig-height: 8
#| fig-width: 10

coverage <- read.csv("coverage_2011_2023_noq1.csv") %>%
  arrange(comuna2, ano) %>%
  mutate(
    year = ano - min(ano) + 1,
    id = comuna2,
    drsc = drs_coverage,
    dgcc = dm_coverage
  )

all_models_by_period <- readRDS("/Users/rolo/Documents/dr_lcmm/all_models_by_period.rds")# Cuando termina de correr el functions script, corro el de model adquacy


residualplot_extended <- function(model, nameofoutcome, nameofage, data, 
                                  ylimit = c(-1, 1), base_size = 9) {
  require(dplyr)
  require(ggplot2)
  require(rlang)
  
  k <- ifelse(is.null(model$ng), 1, model$ng)
  preds <- model$pred
  names(preds)[6] <- nameofoutcome
  nameofid <- names(model$pred)[1]
  
  test <- dplyr::left_join(preds, model$pprob, by = nameofid)
  test <- dplyr::left_join(test, data, by = c(nameofid, nameofoutcome))
  
  plot_list <- list()
  
  for (i in 1:k) {
    class_col <- if (k == 1) "pred_ss1" else paste0("pred_ss", i)
    class_label <- if (k == 1) "1" else as.character(i)
    
    plot_data <- test %>%
      filter(k == 1 | class == i) %>%
      mutate(Residuals = get(nameofoutcome) - !!parse_expr(class_col))
    
    p <- ggplot(data = plot_data, aes(x = get(nameofage), y = Residuals)) +
      theme_minimal(base_size = base_size) +
      geom_point(size = 0.05) + 
      stat_summary(fun = mean, geom = "line", size = 0.5, col = "CadetBlue") +
      scale_x_continuous(breaks = seq(min(plot_data[[nameofage]], na.rm = TRUE), 
                                      max(plot_data[[nameofage]], na.rm = TRUE), by = 2)) +
      ggtitle(paste("Residuals in class", class_label)) +
      xlab("Year") +
      ylim(ylimit) +
      theme(
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(),
        legend.position = "bottom",
        legend.title = element_blank(),
        legend.key = element_rect(fill = "white", colour = "white"),
        panel.border = element_rect(colour = "black", fill = NA, linewidth = 1),
        plot.title = element_text(size = 9, face = "bold")
        
      )
    
    plot_list[[i]] <- p
  }
  
  return(plot_list)
}


library(tidyverse)
library(gridExtra)
library(grid)

# Tus listas ya definidas
models_to_plot <- list(
  "DGCC 2011–2023" = all_models_by_period[["2011_2023"]][["4class_cubic_nre_dgcc_model"]],
  "DGCC 2011–2019" = all_models_by_period[["2011_2019"]][["4class_quadratic_nre_dgcc_model"]],
  "DRSC 2011–2023" = all_models_by_period[["2011_2023"]][["4class_cubic_nre_drsc_model"]],
  "DRSC 2011–2019" = all_models_by_period[["2011_2019"]][["4class_quadratic_random_effects_prop_drsc_model"]]
)

outcomes <- c("dm_coverage", "dm_coverage", "drs_coverage", "drs_coverage")
names(outcomes) <- names(models_to_plot)

# Función para generar lista de plots por clase
plot_list <- map2(models_to_plot, outcomes, ~
                    residualplot_extended(
                      model = .x,
                      nameofoutcome = .y,
                      nameofage = "ano",
                      data = coverage
                    )
)

# Crear filas con una columna de texto + 4 gráficos
row_blocks <- pmap(
  list(names(models_to_plot), plot_list),
  function(label, plots) {
    text_box <- textGrob(label, rot = 90, gp = gpar(fontsize = 9, fontface = "bold"))
    arrangeGrob(grobs = c(list(text_box), plots), ncol = 5, widths = c(1.2, rep(4, 4)))
  }
)

# Mostrar todo
grid.arrange(
  grobs = row_blocks,
  ncol = 1,
  #top = textGrob("Residuals per Class – All Four 4-Class Models", gp = gpar(fontsize = 14, fontface = "bold"))
)


# Descomponer y aplanar todas las clases
#all_class_plots <- flatten(plot_list)

#grid.arrange(
#  grobs = all_class_plots,
#  ncol = 4,
#  top = "Residuals per Class – All Four 4-Class Models"
#)



```

**Supplementary Figures S2–S5. *Latent class selection elbows plots across ten different structures in DGCC 2011-2023.***\
Each figure presents model comparison panels used to guide latent class number selection for a given outcome and time period. Within each panel, the black line displays the Bayesian Information Criterion (BIC) across models with 1 to 7 latent classes, allowing visual identification of the “elbow point” where model fit improvements begin to plateau. The vertical stacked bars represent the proportion of the population assigned to each class at each solution, with darker red hues indicating smaller class sizes. Together, the BIC curve and class distribution inform model selection by balancing statistical fit and classification adequacy. These plots support the decisions reported in Table 1 and discussed in the model adequacy assessment.

```{r}
#| message: false
#| warning: false
#| fig-height: 14
#| fig-width: 10
#| fig-cap: "Figure S2. Latent class selection plots for DGCC (2011–2023)"


# Leer datos
model_adequacy_table <- read_csv("model_adequacy_table.csv")

# Filtrar sin periodo 2020_2023 y extraer estructura
filtered_df <- model_adequacy_table %>%
  dplyr::filter(!stringr::str_detect(Model, "2020_2023")) %>%
  dplyr::mutate(
    Structure = Model %>%
      stringr::str_replace("^[0-9]+class_", "") %>%
      stringr::str_extract("^[^_]+_[^_]+_[^_]+"),
    Period = stringr::str_extract(Model, "\\d{4}_\\d{4}")
  )

filtered_df <- model_adequacy_table %>%
  dplyr::filter(!stringr::str_detect(Model, "2020_2023")) %>%
  dplyr::mutate(
    Structure = Model %>%
      stringr::str_replace("^[0-9]+class_", "") %>%
      stringr::str_replace("_model_.*", ""),  # Removes everything from '_model_' onwards
    Period = stringr::str_extract(Model, "\\d{4}_\\d{4}"),
    Outcome = stringr::str_extract(Model, "_(drsc|dgcc)_") %>% stringr::str_replace_all("_", "")
  ) 


# Detectar columnas de proporción
proportion_cols <- names(filtered_df)[stringr::str_detect(names(filtered_df), "^%class")]

# Pivotear a formato largo
class_df_long <- filtered_df %>%
  tidyr::pivot_longer(cols = tidyselect::all_of(proportion_cols),
                      names_to = "Class",
                      values_to = "Proportion") %>%
  dplyr::mutate(
    Class = factor(Class, levels = proportion_cols)
  )

# Función para generar gráfico tipo elbow con eje secundario BIC
plot_elbow_stack <- function(df_model) {
  structure <- unique(df_model$Structure)
  period <- unique(df_model$Period)
  
  df_summary <- df_model %>%
    dplyr::group_by(G, Class) %>%
    dplyr::summarise(Proportion = mean(Proportion, na.rm = TRUE), .groups = "drop")
  
  bic_df <- df_model %>%
    dplyr::group_by(G) %>%
    dplyr::summarise(BIC = mean(BIC, na.rm = TRUE), .groups = "drop")
  
  if (nrow(bic_df) < 2) {
    message("Skipping plot for ", structure, " | ", period, ": not enough BIC values")
    return(NULL)
  }
  
  bic_range <- range(bic_df$BIC, na.rm = TRUE)
  bic_min <- bic_range[1]
  bic_max <- bic_range[2]
  scale_factor <- 100 / (bic_max - bic_min)
  
  bic_df <- bic_df %>%
    dplyr::mutate(BIC_scaled = (BIC - bic_min) * scale_factor)
  
  ggplot(df_summary, aes(x = factor(G), y = Proportion, fill = Class)) +
    geom_bar(stat = "identity", color = "white") +
    scale_fill_brewer(palette = "Reds") +
    geom_line(data = bic_df, aes(x = factor(G), y = BIC_scaled, group = 1),
              inherit.aes = FALSE, color = "black", size = 1) +
    geom_point(data = bic_df, aes(x = factor(G), y = BIC_scaled),
               inherit.aes = FALSE, color = "black", size = 2) +
    scale_y_continuous(
      name = "% Proportion of Population",
      sec.axis = sec_axis(~ . / scale_factor + bic_min, name = "BIC")
    ) +
    labs(
      title = paste(structure, "|", period),
      x = "Number of Classes",
      fill = "Class"
    ) +
    theme_minimal()+ 
    theme(legend.position = "none")

}

# Generar lista de gráficos válidos
plots <- class_df_long %>%
  dplyr::group_by(Structure, Period) %>%
  dplyr::group_split() %>%
  purrr::map(plot_elbow_stack) %>%
  purrr::compact()

structures <- model_adequacy_table %>%
  dplyr::filter(!stringr::str_detect(Model, "2020_2023")) %>%
  dplyr::pull(Model) %>%
  stringr::str_replace("^\\d+class_", "") %>%
  stringr::str_replace("_model", "") %>%
  unique() %>% 
  sort()

 # ahora debería dar 40
names(plots) <- structures

# Step 1: Split structures based on their pattern
drsc_2011_2023 <- plots[str_detect(names(plots), "drsc_2011_2023")]
dgcc_2011_2023 <- plots[str_detect(names(plots), "dgcc_2011_2023")]
drsc_2011_2019 <- plots[str_detect(names(plots), "drsc_2011_2019")]
dgcc_2011_2019 <- plots[str_detect(names(plots), "dgcc_2011_2019")]


library(gridExtra)

grid.arrange(
  grobs = dgcc_2011_2023,
  ncol = 2,  # 5 columns
  nrow = 5   # 2 rows
)







```

```{r}
#| message: false
#| warning: false
#| fig-height: 14
#| fig-width: 10
#| fig-cap: "Figure S3. Latent class selection plots for DGCC (2011–2019)"

grid.arrange(
  grobs = dgcc_2011_2019,
  ncol = 2,  # 5 columns
  nrow = 5   # 2 rows
)

```

```{r}
#| message: false
#| warning: false
#| fig-height: 14
#| fig-width: 10
#| fig-cap: "Figure S4. Latent class selection plots for DRSC (2011–2023)"

grid.arrange(
  grobs = drsc_2011_2023,
  ncol = 2,  # 5 columns
  nrow = 5   # 2 rows
)

```

```{r}
#| message: false
#| warning: false
#| fig-height: 14
#| fig-width: 10
#| paged-print: false
#| fig-cap: "Figure S5. Latent class selection plots for DRSC (2011–2019)"

grid.arrange(
  grobs = drsc_2011_2019,
  ncol = 2,  # 5 columns
  nrow = 5   # 2 rows
)

```

```{r}
#| echo: false
#| message: false
#| warning: false
#| paged-print: false

selected_structures <- c(
  "class_cubic_nre_dgcc_model_2011_2023",
  "class_quadratic_nre_dgcc_model_2011_2019",
  "class_cubic_nre_drsc_model_2011_2023",
  "class_quadratic_random_effects_prop_drsc_model_2011_2019"
)

model_adequacy_table %>%
  filter(str_detect(Model, paste(selected_structures, collapse = "|"))) %>% 
  filter(str_detect(Model, "2011_2023") | str_detect(Model, "2011_2019")) %>%
  mutate(
    Period = case_when(
      str_detect(Model, "2011_2023") ~ "2011–2023",
      str_detect(Model, "2011_2019") ~ "2011–2019",
      TRUE ~ NA_character_
    ),
    Structure = case_when(
      str_detect(Model, "linear_nre_homocedastic") ~ "A",
      str_detect(Model, "linear_nre_heterocedastic") ~ "B",
      str_detect(Model, "quadratic_nre") ~ "C",
      str_detect(Model, "cubic_nre") ~ "D",
      str_detect(Model, "linear_random_intercept_slope") ~ "E",
      str_detect(Model, "linear_random_intercept") ~ "F",
      str_detect(Model, "quadratic_random_effects_prop") ~ "G",
      str_detect(Model, "quadratic_random_effects") ~ "H",
      str_detect(Model, "cubic_random_effects_prop") ~ "I",
      str_detect(Model, "cubic_random_effects") ~ "J",
      TRUE ~ "Unknown"
    ),
    Outcome = case_when(
      str_detect(Model, "dgcc") ~ "DGCC",
      str_detect(Model, "drsc") ~ "DRSC",
      TRUE ~ "Other"
    ),
    non_converged = abs(BIC) > 1e6,  # flag large BIC
    BIC_display = ifelse(non_converged, "*", scales::number(BIC, accuracy = 0.1, big.mark = ","))
  ) %>%
  mutate(
    entropy = round(entropy, 2),
    Lowest_APPA = round(Lowest_APPA * 100, 2),
    Lowest_OCC = round(Lowest_OCC, 1),
    Smallest_Class_Size_Percentage = round(Smallest_Class_Size_Percentage, 1),
    DoS_Mahalanobis = round(DoS_Mahalanobis, 1)
  ) %>%
  select(Outcome, Period, Model, Structure, G, BIC_display, entropy,
         Smallest_Class_Size_Percentage, Lowest_APPA,
         Lowest_OCC, Highest_Mismatch, DoS_Mahalanobis) %>%
  dplyr::rename(
    "Nº of classes" = G,
    "BIC" = BIC_display,
    "Relative entropy" = entropy,
    "Smallest class size (%)" = Smallest_Class_Size_Percentage,
    "Lowest APPA (%)" = Lowest_APPA,
    "Lowest OCC" = Lowest_OCC,
    "Highest MMV" = Highest_Mismatch,
    "Mahalanobis distance" = DoS_Mahalanobis
  ) %>%
  arrange(Outcome, desc(Period), Structure) %>% 
  select(-Outcome, -Period, -Model) %>%
  #filter(Structure %in% c("D", "C", "G")) %>% 
  gt() %>%
  tab_options(
    table.font.size = 10,
    data_row.padding = px(0),
    table.border.top.color = "black",
    heading.border.bottom.color = "black",
    row_group.border.top.color = "black",
    row_group.border.bottom.color = "white",
    table.border.bottom.color = "white",
    column_labels.border.top.color = "black",
    column_labels.border.bottom.color = "black",
    table_body.border.bottom.color = "black",
    table_body.hlines.color = "white"
  ) %>% 
  tab_style(
   style = cell_text(weight = "bold"),
   locations = cells_body(rows = c(4, 11, 18, 25))
  ) %>% 
  tab_row_group(
    group = "Diabetic retinopathy screening coverage 2011-2019",
    rows = 22:28
  ) %>% 
  tab_row_group(
    group = "Diabetic retinopathy screening coverage 2011-2023",
    rows =15:21
  ) %>% 
  tab_row_group(
    group = "Diabetic glycemic control coverage 2011-2019",
    rows = 8:14
  ) %>% 
  tab_row_group(
    group = "Diabetic glycemic control coverage 2011-2023",
    rows =1:7
  ) %>% 
  tab_source_note(source_note = md("**Abbreviations:** LCMM - Latent class mixture model; BIC - Bayesian information criterion; SCS - Smallest class size; APPA - Average posterior probability; MMV - Mismatch value; OCC - Odds of correct classification. * Model did not converge; BIC not reliable.")) %>% 
  tab_header(
    title = md("**Supplementary Table S3. Number of classes (K=1–7) using quadratic and cubic non random effects and quadratic radnom effects proportional structure Model F (proportional covariance structure) by gender**"))

```

```{r}
#| echo: false
#| message: false
#| warning: false
#| paged-print: false


model_adequacy_table <- read.csv("model_adequacy_table.csv")

selected_models <- c(
  "4class_cubic_nre_dgcc_model_2011_2023",
  "4class_quadratic_nre_dgcc_model_2011_2019",
  "4class_cubic_nre_drsc_model_2011_2023",
  "4class_quadratic_random_effects_prop_drsc_model_2011_2019"
)

model_adequacy_table %>%
  filter(str_detect(Model, "^4class_") & 
         (str_detect(Model, "2011_2023") | str_detect(Model, "2011_2019"))) %>%
  mutate(
    Period = case_when(
      str_detect(Model, "2011_2023") ~ "2011–2023",
      str_detect(Model, "2011_2019") ~ "2011–2019",
      TRUE ~ NA_character_
    ),
    Structure = case_when(
      str_detect(Model, "linear_nre_homocedastic") ~ "A",
      str_detect(Model, "linear_nre_heterocedastic") ~ "B",
      str_detect(Model, "quadratic_nre") ~ "C",
      str_detect(Model, "cubic_nre") ~ "D",
      str_detect(Model, "linear_random_intercept_slope") ~ "E",
      str_detect(Model, "linear_random_intercept") ~ "F",
      str_detect(Model, "quadratic_random_effects_prop") ~ "G",
      str_detect(Model, "quadratic_random_effects") ~ "H",
      str_detect(Model, "cubic_random_effects_prop") ~ "I",
      str_detect(Model, "cubic_random_effects") ~ "J",
      TRUE ~ "Unknown"
    ),
    Outcome = case_when(
      str_detect(Model, "dgcc") ~ "DGCC",
      str_detect(Model, "drsc") ~ "DRSC",
      TRUE ~ "Other"
    ),
    non_converged = abs(BIC) > 1e6,  # flag large BIC
    BIC_display = ifelse(non_converged, "*", scales::number(BIC, accuracy = 0.1, big.mark = ","))
  ) %>%
  mutate(
    entropy = round(entropy, 2),
    Lowest_APPA = round(Lowest_APPA * 100, 2),
    Lowest_OCC = round(Lowest_OCC, 1),
    Smallest_Class_Size_Percentage = round(Smallest_Class_Size_Percentage, 1),
    DoS_Mahalanobis = round(DoS_Mahalanobis, 1)
  ) %>%
  select(Outcome, Period, Model, Structure, G, BIC_display, entropy,
         Smallest_Class_Size_Percentage, Lowest_APPA,
         Lowest_OCC, Highest_Mismatch, DoS_Mahalanobis) %>%
  dplyr::rename(
    "Nº of classes" = G,
    "BIC" = BIC_display,
    "Relative entropy" = entropy,
    "Smallest class size (%)" = Smallest_Class_Size_Percentage,
    "Lowest APPA (%)" = Lowest_APPA,
    "Lowest OCC" = Lowest_OCC,
    "Highest MMV" = Highest_Mismatch,
    "Mahalanobis distance" = DoS_Mahalanobis
  ) %>%
  arrange(Outcome, desc(Period), Structure) %>%
  select(-Outcome, -Period, -Model) %>%
  gt() %>%
  tab_options(
    table.font.size = 10,
    data_row.padding = px(0),
    table.border.top.color = "black",
    heading.border.bottom.color = "black",
    row_group.border.top.color = "black",
    row_group.border.bottom.color = "white",
    table.border.bottom.color = "white",
    column_labels.border.top.color = "black",
    column_labels.border.bottom.color = "black",
    table_body.border.bottom.color = "black",
    table_body.hlines.color = "white"
  )  %>% 
   tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_body(rows = c(4, 13, 24, 37))
  ) %>% 
  tab_row_group(
    group = "Diabetic retinopathy screening coverage 2011-2019",
    rows = 31:40
  ) %>% 
  tab_row_group(
    group = "Diabetic retinopathy screening coverage 2011-2023",
    rows =21:30
  ) %>% 
  tab_row_group(
    group = "Diabetic glycemic control coverage 2011-2019",
    rows = 11:20
  ) %>% 
  tab_row_group(
    group = "Diabetic glycemic control coverage 2011-2023",
    rows =1:10
  ) %>% 
  tab_source_note(source_note = md("**Abbreviations:** LCMM - Latent class mixture model; BIC - Bayesian information criterion; SCS - Smallest class size; APPA - Average posterior probability; MMV - Mismatch value; OCC - Odds of correct classification. * Model did not converge; BIC not reliable.")) %>% 
  tab_header(
    title = md("**Supplementary Table S4. Description of the 10 candidate model structures tested in the LCMM analysis**"))


```

```{r}
#| echo: false
#| message: false
#| warning: false
#| paged-print: false


grolts <- read.csv("Grolts_report1.csv", sep=",") 


grolts %>% 
  dplyr::rename(Items = X) %>% 
  gt::gt() %>%
  #tab_spanner(label = 'Model fit and diagnostic criteria', columns = 2:16) %>%
  tab_options(
    table.font.size = 10,
    data_row.padding = px(1),
    table.border.top.color = "black",
    heading.border.bottom.color = "black",
    row_group.border.top.color = "black",
    row_group.border.bottom.color = "white",
    table.border.bottom.color = "white",
    column_labels.border.top.color = "black",
    column_labels.border.bottom.color = "black",
    table_body.border.bottom.color = "black",
    table_body.hlines.color = "white") %>% 
  tab_header(
    title = md("**Supplementary Table S5. Reporting of latent growth modeling approach using the GRoLTS checklist**"))

```

```{r}
#| label: tbl-S4
#| tbl-cap: "Logistic regression 2011-2019"
#| fig-align: center
#| results: "asis"


d1 <- readr::read_csv("data_reglog.csv")
d2 <- readr::read_csv("data_reglog2.csv")

# Model 5: Single predictor (index_standardized)
model5 <- glm(class_membership ~ index_standardized, family = "binomial", data = d2)
# Model 5a: Single predictor (classification)
model5a <- glm(class_membership ~ classification, family = "binomial", data = d2)
# Model 5b: Single predictor (zona)
model5b <- glm(class_membership ~ zona, family = "binomial", data = d2)
# Model 5c: All predictors
model5c <- glm(class_membership ~ index_standardized + classification + zona, family = "binomial", data = d2)
# Model 6: Two predictors (index_standardized + classification)
model6 <- glm(class_membership ~ index_standardized + classification, family = "binomial", data = d2)
# Model 6a: Two predictors (index_standardized + zona)
model6a <- glm(class_membership ~ index_standardized + zona, family = "binomial", data = d2)
# Model 6b: Two predictors (classification + zona)
model6b <- glm(class_membership ~ classification + zona, family = "binomial", data = d2)



models2 <- list("M1" = model5, 
               "M2" = model5a, 
               "M3" = model5b,
               "M4" = model6, 
               "M5" = model6a,
               "M6" = model6b,
               "M7" = model5c)
  
# additionally we want to change the font, font size and spacing
modelsummary(models2,
output = 'gt',
coef_map = c("index_standardized" = "Deprivation (Standarized ISDE score)",
             "classificationRural" = "Urbanicity (Rural)",
             "classificationUrbana" = "Urbanicity (Urban)",
            "zonanorte" = "Zone (North)",
            "zonasur" = "Zone (South)"),
#stars = T,
#estimate = "{estimate}{stars}",
statistic = c("SE = {std.error}", 
                "p = {p.value}{stars}"),
notes = "Notes: + p < 0.1, * p < 0.05, ** p < 0.01, *** p < 0.001") %>%
tab_spanner(label = 'Dependent variable: DRSC class', columns = 2:8) %>%
tab_options(
table.font.size = 10,
data_row.padding = px(1),
table.border.top.color = "white",
heading.border.bottom.color = "black",
row_group.border.top.color = "black",
row_group.border.bottom.color = "white",
table.border.bottom.color = "white",
column_labels.border.top.color = "black",
column_labels.border.bottom.color = "black",
table_body.border.bottom.color = "black",
table_body.hlines.color = "white"
) %>% 
  tab_row_group(
    group = "",
    rows = 1:15
  )




```

```{r}
#| label: tbl-S5
#| tbl-cap: "Logistic regression 2011-2023"
#| fig-align: left
#| results: "asis"


# Model 1: Single predictor (index_standardized)
model1 <- glm(class_membership ~ index_standardized, family = "binomial", data = d1)
# Model 1a: Single predictor (classification)
model1a <- glm(class_membership ~ classification, family = "binomial", data = d1)
# Model 1b: Single predictor (zona)
model1b <- glm(class_membership ~ zona, family = "binomial", data = d1)
# Model 1c: All predictors
model1c <- glm(class_membership ~ index_standardized + classification + zona, family = "binomial", data = d1)
# Model 2: Two predictors (index_standardized + classification)
model2 <- glm(class_membership ~ index_standardized + classification, family = "binomial", data = d1)
# Model 2a: Two predictors (index_standardized + zona)
model2a <- glm(class_membership ~ index_standardized + zona, family = "binomial", data = d1)
# Model 2b: Two predictors (classification + zona)
model2b <- glm(class_membership ~ classification + zona, family = "binomial", data = d1)

models <- list("M1" = model1, 
               "M2" = model1a, 
               "M3" = model1b,
               "M4" = model2, 
               "M5" = model2a,
               "M6" = model2b,
               "M7" = model1c)
  
# additionally we want to change the font, font size and spacing
modelsummary(models,
output = 'gt',
coef_map = c("index_standardized" = "Deprivation (Standarized ISDE score)",
             "classificationRural" = "Urbanicity (Rural)",
             "classificationUrbana" = "Urbanicity (Urban)",
            "zonanorte" = "Zona (Norte)",
            "zonasur" = "Zona (Sur)"),
#stars = T,
#estimate = "{estimate}{stars}",
statistic = c("SE = {std.error}", 
                "p = {p.value}{stars}"),
notes = "Notes: + p < 0.1, * p < 0.05, ** p < 0.01, *** p < 0.001") %>%
tab_spanner(label = 'Dependent variable: DRSC class', columns = 2:8) %>%
tab_options(
table.font.size = 10,
data_row.padding = px(1),
table.border.top.color = "white",
heading.border.bottom.color = "black",
row_group.border.top.color = "black",
row_group.border.bottom.color = "white",
table.border.bottom.color = "white",
column_labels.border.top.color = "black",
column_labels.border.bottom.color = "black",
table_body.border.bottom.color = "black",
table_body.hlines.color = "white"
) %>% 
  tab_row_group(
    group = "",
    rows = 1:15
  )


```

```{r}
#| label: tbl-S6
#| tbl-cap: "Framework of eight steps to construct a latent class trajectory model"
#| fig-align: left

tibble::tibble(
  Step = 1:8,
  `Step description` = c(
    "Scope model by provisionally selecting a plausible number of classes based on available literature and the structure based on plausible clinical patterns.",
    "Refine the model from step 1 to confirm the optimal number of classes, typically testing K=1–7 classes.",
    "Refine optimal model structure from fixed through to unrestricted random effects of the model using the favoured K derived in step 2.",
    "Run model adequacy assessments as described in online supplementary table S3 including posterior probability of assignments (APPA), odds of correct classification (OCC) and relative entropy.",
    "Investigate graphical presentation",
    "Run additional tools to assess discrimination including Degrees of separation (DoS) and Elsensohn’s envelope of residuals",
    "Assess for clinical characterisation and plausibility.",
    "Conduct sensitivity analyses, for example, testing models without complete data at all time points."
  ),
  `Criteria for selection` = c(
    "Examine linearity of the shape of standardised residual plots for each of the classes in a model with no random effects.",
    "Lowest Bayesian information criteria value.",
    "",
    "APPA: average of maximum probabilities should be greater than 70% for all classes.\nOCC values greater than 5.0.\nRelative entropy values greater than 0.5.",
    "Plot mean trajectories across time for each class in a single graph.\nPlot mean trajectories with 95% predictive intervals for each class (one class per graph).\nPlot individual class ‘spaghetti plots’ across time for a random sample.",
    "DoS greater than zero.\nEnvelope of residuals is assessed in plots by observing clear separations between classes.",
    "Tabulation of characteristics by latent classes. Are the trajectory patterns clinically meaningful? Perhaps, consider classes with a minimum percentage of the population.\nAre the trajectory patterns clinically plausible?\nConcordance of class characteristics with those for other well-established variables.",
    "General assessment of patterns of trajectories compared with main model."
  )
) %>%
  gt::gt() %>%
  #tab_spanner(label = 'Model fit and diagnostic criteria', columns = 2:16) %>%
  tab_options(
    table.font.size = 10,
    data_row.padding = px(1),
    table.border.top.color = "black",
    heading.border.bottom.color = "black",
    row_group.border.top.color = "black",
    row_group.border.bottom.color = "white",
    table.border.bottom.color = "white",
    column_labels.border.top.color = "black",
    column_labels.border.bottom.color = "black",
    table_body.border.bottom.color = "black",
    table_body.hlines.color = "white") 
```
